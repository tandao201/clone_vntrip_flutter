///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class ResponseCheckOutDataFlightPassengers {
/*
{
  "type": "ADT",
  "index": 0,
  "gender": true,
  "birthday": "31082010",
  "lastName": "TAN",
  "firstName": "TA",
  "listBaggage": [
    null
  ]
}
*/

  String? type;
  int? index;
  bool? gender;
  String? birthday;
  String? lastName;
  String? firstName;
  // List<ResponseCheckOutDataFlightPassengersListBaggage?>? listBaggage;

  ResponseCheckOutDataFlightPassengers({
    this.type,
    this.index,
    this.gender,
    this.birthday,
    this.lastName,
    this.firstName,
    // this.listBaggage,
  });
  ResponseCheckOutDataFlightPassengers.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    index = json['index']?.toInt();
    gender = json['gender'];
    birthday = json['birthday']?.toString();
    lastName = json['lastName']?.toString();
    firstName = json['firstName']?.toString();
    }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['index'] = index;
    data['gender'] = gender;
    data['birthday'] = birthday;
    data['lastName'] = lastName;
    data['firstName'] = firstName;
    return data;
  }
}

class ResponseCheckOutDataFlightRateItineraryPassengers {
/*
{
  "key": "dup_f_b_cb9c94e5e814e3e0fb8b9c58e643890c",
  "value": "tan@gmail.com0969841833-tan ta-vj_hansgn_2022-09-20t06:05:00"
}
*/

  String? key;
  String? value;

  ResponseCheckOutDataFlightRateItineraryPassengers({
    this.key,
    this.value,
  });
  ResponseCheckOutDataFlightRateItineraryPassengers.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    value = json['value']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['value'] = value;
    return data;
  }
}

class ResponseCheckOutDataFlightRateListFlightListSegment {
/*
{
  "id": 0,
  "class": "E1_ECO",
  "plane": "Airbus A330",
  "airline": "VJ",
  "endTime": "2022-09-20T08:15:00",
  "hasStop": false,
  "duration": 130,
  "endPoint": "SGN",
  "lastItem": true,
  "stopTime": 0,
  "dayChange": false,
  "startTime": "2022-09-20T06:05:00",
  "stopPoint": "SGN",
  "startPoint": "HAN",
  "handBaggage": "07kg",
  "flightNumber": "VJ133",
  "changeAirport": false,
  "changeStation": false,
  "stopOvernight": false
}
*/

  int? id;
  String? theClass;
  String? plane;
  String? airline;
  String? endTime;
  bool? hasStop;
  int? duration;
  String? endPoint;
  bool? lastItem;
  int? stopTime;
  bool? dayChange;
  String? startTime;
  String? stopPoint;
  String? startPoint;
  String? handBaggage;
  String? flightNumber;
  bool? changeAirport;
  bool? changeStation;
  bool? stopOvernight;

  ResponseCheckOutDataFlightRateListFlightListSegment({
    this.id,
    this.theClass,
    this.plane,
    this.airline,
    this.endTime,
    this.hasStop,
    this.duration,
    this.endPoint,
    this.lastItem,
    this.stopTime,
    this.dayChange,
    this.startTime,
    this.stopPoint,
    this.startPoint,
    this.handBaggage,
    this.flightNumber,
    this.changeAirport,
    this.changeStation,
    this.stopOvernight,
  });
  ResponseCheckOutDataFlightRateListFlightListSegment.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    theClass = json['class']?.toString();
    plane = json['plane']?.toString();
    airline = json['airline']?.toString();
    endTime = json['endTime']?.toString();
    hasStop = json['hasStop'];
    duration = json['duration']?.toInt();
    endPoint = json['endPoint']?.toString();
    lastItem = json['lastItem'];
    stopTime = json['stopTime']?.toInt();
    dayChange = json['dayChange'];
    startTime = json['startTime']?.toString();
    stopPoint = json['stopPoint']?.toString();
    startPoint = json['startPoint']?.toString();
    handBaggage = json['handBaggage']?.toString();
    flightNumber = json['flightNumber']?.toString();
    changeAirport = json['changeAirport'];
    changeStation = json['changeStation'];
    stopOvernight = json['stopOvernight'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['class'] = theClass;
    data['plane'] = plane;
    data['airline'] = airline;
    data['endTime'] = endTime;
    data['hasStop'] = hasStop;
    data['duration'] = duration;
    data['endPoint'] = endPoint;
    data['lastItem'] = lastItem;
    data['stopTime'] = stopTime;
    data['dayChange'] = dayChange;
    data['startTime'] = startTime;
    data['stopPoint'] = stopPoint;
    data['startPoint'] = startPoint;
    data['handBaggage'] = handBaggage;
    data['flightNumber'] = flightNumber;
    data['changeAirport'] = changeAirport;
    data['changeStation'] = changeStation;
    data['stopOvernight'] = stopOvernight;
    return data;
  }
}

class ResponseCheckOutDataFlightRateListFlight {
/*
{
  "leg": 0,
  "promo": false,
  "isShow": true,
  "airline": "VJ",
  "endDate": "2022-09-20T08:15:00",
  "stopNum": 0,
  "duration": 130,
  "endPoint": "SGN",
  "flightId": 0,
  "noRefund": false,
  "fareClass": "E1_ECO",
  "startDate": "2022-09-20T06:05:00",
  "groupClass": "Eco",
  "startPoint": "HAN",
  "flightValue": "VJ133|HAN-SGN|202209200605-202209200815",
  "hasDownStop": false,
  "listSegment": [
    {
      "id": 0,
      "class": "E1_ECO",
      "plane": "Airbus A330",
      "airline": "VJ",
      "endTime": "2022-09-20T08:15:00",
      "hasStop": false,
      "duration": 130,
      "endPoint": "SGN",
      "lastItem": true,
      "stopTime": 0,
      "dayChange": false,
      "startTime": "2022-09-20T06:05:00",
      "stopPoint": "SGN",
      "startPoint": "HAN",
      "handBaggage": "07kg",
      "flightNumber": "VJ133",
      "changeAirport": false,
      "changeStation": false,
      "stopOvernight": false
    }
  ],
  "flightNumber": "VJ133"
}
*/

  int? leg;
  bool? promo;
  bool? isShow;
  String? airline;
  String? endDate;
  int? stopNum;
  int? duration;
  String? endPoint;
  int? flightId;
  bool? noRefund;
  String? fareClass;
  String? startDate;
  String? groupClass;
  String? startPoint;
  String? flightValue;
  bool? hasDownStop;
  List<ResponseCheckOutDataFlightRateListFlightListSegment?>? listSegment;
  String? flightNumber;

  ResponseCheckOutDataFlightRateListFlight({
    this.leg,
    this.promo,
    this.isShow,
    this.airline,
    this.endDate,
    this.stopNum,
    this.duration,
    this.endPoint,
    this.flightId,
    this.noRefund,
    this.fareClass,
    this.startDate,
    this.groupClass,
    this.startPoint,
    this.flightValue,
    this.hasDownStop,
    this.listSegment,
    this.flightNumber,
  });
  ResponseCheckOutDataFlightRateListFlight.fromJson(Map<String, dynamic> json) {
    leg = json['leg']?.toInt();
    promo = json['promo'];
    isShow = json['isShow'];
    airline = json['airline']?.toString();
    endDate = json['endDate']?.toString();
    stopNum = json['stopNum']?.toInt();
    duration = json['duration']?.toInt();
    endPoint = json['endPoint']?.toString();
    flightId = json['flightId']?.toInt();
    noRefund = json['noRefund'];
    fareClass = json['fareClass']?.toString();
    startDate = json['startDate']?.toString();
    groupClass = json['groupClass']?.toString();
    startPoint = json['startPoint']?.toString();
    flightValue = json['flightValue']?.toString();
    hasDownStop = json['hasDownStop'];
    if (json['listSegment'] != null) {
      final v = json['listSegment'];
      final arr0 = <ResponseCheckOutDataFlightRateListFlightListSegment>[];
      v.forEach((v) {
        arr0.add(ResponseCheckOutDataFlightRateListFlightListSegment.fromJson(v));
      });
      listSegment = arr0;
    }
    flightNumber = json['flightNumber']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['leg'] = leg;
    data['promo'] = promo;
    data['isShow'] = isShow;
    data['airline'] = airline;
    data['endDate'] = endDate;
    data['stopNum'] = stopNum;
    data['duration'] = duration;
    data['endPoint'] = endPoint;
    data['flightId'] = flightId;
    data['noRefund'] = noRefund;
    data['fareClass'] = fareClass;
    data['startDate'] = startDate;
    data['groupClass'] = groupClass;
    data['startPoint'] = startPoint;
    data['flightValue'] = flightValue;
    data['hasDownStop'] = hasDownStop;
    if (listSegment != null) {
      final v = listSegment;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['listSegment'] = arr0;
    }
    data['flightNumber'] = flightNumber;
    return data;
  }
}

class ResponseCheckOutDataFlightRateFlightItemListSegment {
/*
{
  "id": 0,
  "class": "E1_ECO",
  "plane": "Airbus A330",
  "airline": "VJ",
  "endTime": "2022-09-20T08:15:00",
  "hasStop": false,
  "duration": 130,
  "endPoint": "SGN",
  "lastItem": true,
  "stopTime": 0,
  "dayChange": false,
  "startTime": "2022-09-20T06:05:00",
  "stopPoint": "SGN",
  "startPoint": "HAN",
  "handBaggage": "07kg",
  "flightNumber": "VJ133",
  "changeAirport": false,
  "changeStation": false,
  "stopOvernight": false
}
*/

  int? id;
  String? theClass;
  String? plane;
  String? airline;
  String? endTime;
  bool? hasStop;
  int? duration;
  String? endPoint;
  bool? lastItem;
  int? stopTime;
  bool? dayChange;
  String? startTime;
  String? stopPoint;
  String? startPoint;
  String? handBaggage;
  String? flightNumber;
  bool? changeAirport;
  bool? changeStation;
  bool? stopOvernight;

  ResponseCheckOutDataFlightRateFlightItemListSegment({
    this.id,
    this.theClass,
    this.plane,
    this.airline,
    this.endTime,
    this.hasStop,
    this.duration,
    this.endPoint,
    this.lastItem,
    this.stopTime,
    this.dayChange,
    this.startTime,
    this.stopPoint,
    this.startPoint,
    this.handBaggage,
    this.flightNumber,
    this.changeAirport,
    this.changeStation,
    this.stopOvernight,
  });
  ResponseCheckOutDataFlightRateFlightItemListSegment.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    theClass = json['class']?.toString();
    plane = json['plane']?.toString();
    airline = json['airline']?.toString();
    endTime = json['endTime']?.toString();
    hasStop = json['hasStop'];
    duration = json['duration']?.toInt();
    endPoint = json['endPoint']?.toString();
    lastItem = json['lastItem'];
    stopTime = json['stopTime']?.toInt();
    dayChange = json['dayChange'];
    startTime = json['startTime']?.toString();
    stopPoint = json['stopPoint']?.toString();
    startPoint = json['startPoint']?.toString();
    handBaggage = json['handBaggage']?.toString();
    flightNumber = json['flightNumber']?.toString();
    changeAirport = json['changeAirport'];
    changeStation = json['changeStation'];
    stopOvernight = json['stopOvernight'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['class'] = theClass;
    data['plane'] = plane;
    data['airline'] = airline;
    data['endTime'] = endTime;
    data['hasStop'] = hasStop;
    data['duration'] = duration;
    data['endPoint'] = endPoint;
    data['lastItem'] = lastItem;
    data['stopTime'] = stopTime;
    data['dayChange'] = dayChange;
    data['startTime'] = startTime;
    data['stopPoint'] = stopPoint;
    data['startPoint'] = startPoint;
    data['handBaggage'] = handBaggage;
    data['flightNumber'] = flightNumber;
    data['changeAirport'] = changeAirport;
    data['changeStation'] = changeStation;
    data['stopOvernight'] = stopOvernight;
    return data;
  }
}

class ResponseCheckOutDataFlightRateFlightItem {
/*
{
  "leg": 0,
  "promo": false,
  "isShow": true,
  "airline": "VJ",
  "endDate": "2022-09-20T08:15:00",
  "stopNum": 0,
  "duration": 130,
  "endPoint": "SGN",
  "flightId": 0,
  "isReturn": false,
  "noRefund": false,
  "fareClass": "E1_ECO",
  "startDate": "2022-09-20T06:05:00",
  "groupClass": "Eco",
  "startPoint": "HAN",
  "flightValue": "VJ133|HAN-SGN|202209200605-202209200815",
  "hasDownStop": false,
  "listSegment": [
    {
      "id": 0,
      "class": "E1_ECO",
      "plane": "Airbus A330",
      "airline": "VJ",
      "endTime": "2022-09-20T08:15:00",
      "hasStop": false,
      "duration": 130,
      "endPoint": "SGN",
      "lastItem": true,
      "stopTime": 0,
      "dayChange": false,
      "startTime": "2022-09-20T06:05:00",
      "stopPoint": "SGN",
      "startPoint": "HAN",
      "handBaggage": "07kg",
      "flightNumber": "VJ133",
      "changeAirport": false,
      "changeStation": false,
      "stopOvernight": false
    }
  ],
  "flightNumber": "VJ133"
}
*/

  int? leg;
  bool? promo;
  bool? isShow;
  String? airline;
  String? endDate;
  int? stopNum;
  int? duration;
  String? endPoint;
  int? flightId;
  bool? isReturn;
  bool? noRefund;
  String? fareClass;
  String? startDate;
  String? groupClass;
  String? startPoint;
  String? flightValue;
  bool? hasDownStop;
  List<ResponseCheckOutDataFlightRateFlightItemListSegment?>? listSegment;
  String? flightNumber;

  ResponseCheckOutDataFlightRateFlightItem({
    this.leg,
    this.promo,
    this.isShow,
    this.airline,
    this.endDate,
    this.stopNum,
    this.duration,
    this.endPoint,
    this.flightId,
    this.isReturn,
    this.noRefund,
    this.fareClass,
    this.startDate,
    this.groupClass,
    this.startPoint,
    this.flightValue,
    this.hasDownStop,
    this.listSegment,
    this.flightNumber,
  });
  ResponseCheckOutDataFlightRateFlightItem.fromJson(Map<String, dynamic> json) {
    leg = json['leg']?.toInt();
    promo = json['promo'];
    isShow = json['isShow'];
    airline = json['airline']?.toString();
    endDate = json['endDate']?.toString();
    stopNum = json['stopNum']?.toInt();
    duration = json['duration']?.toInt();
    endPoint = json['endPoint']?.toString();
    flightId = json['flightId']?.toInt();
    isReturn = json['isReturn'];
    noRefund = json['noRefund'];
    fareClass = json['fareClass']?.toString();
    startDate = json['startDate']?.toString();
    groupClass = json['groupClass']?.toString();
    startPoint = json['startPoint']?.toString();
    flightValue = json['flightValue']?.toString();
    hasDownStop = json['hasDownStop'];
    if (json['listSegment'] != null) {
      final v = json['listSegment'];
      final arr0 = <ResponseCheckOutDataFlightRateFlightItemListSegment>[];
      v.forEach((v) {
        arr0.add(ResponseCheckOutDataFlightRateFlightItemListSegment.fromJson(v));
      });
      listSegment = arr0;
    }
    flightNumber = json['flightNumber']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['leg'] = leg;
    data['promo'] = promo;
    data['isShow'] = isShow;
    data['airline'] = airline;
    data['endDate'] = endDate;
    data['stopNum'] = stopNum;
    data['duration'] = duration;
    data['endPoint'] = endPoint;
    data['flightId'] = flightId;
    data['isReturn'] = isReturn;
    data['noRefund'] = noRefund;
    data['fareClass'] = fareClass;
    data['startDate'] = startDate;
    data['groupClass'] = groupClass;
    data['startPoint'] = startPoint;
    data['flightValue'] = flightValue;
    data['hasDownStop'] = hasDownStop;
    if (listSegment != null) {
      final v = listSegment;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['listSegment'] = arr0;
    }
    data['flightNumber'] = flightNumber;
    return data;
  }
}

class ResponseCheckOutDataFlightRate {
/*
{
  "adt": 1,
  "chd": 0,
  "inf": 0,
  "leg": 0,
  "promo": false,
  "token": "flight_item_491152777647775740",
  "feeAdt": 520000,
  "feeChd": 400000,
  "feeInf": 0,
  "isShow": true,
  "taxAdt": 47920,
  "taxChd": 47920,
  "taxInf": 0,
  "airline": "VJ",
  "fareAdt": 199000,
  "fareChd": 199000,
  "fareInf": 0,
  "session": "1663400736262",
  "currency": "VND",
  "autoIssue": false,
  "itinerary": 1,
  "fareDataId": 0,
  "flightItem": {
    "leg": 0,
    "promo": false,
    "isShow": true,
    "airline": "VJ",
    "endDate": "2022-09-20T08:15:00",
    "stopNum": 0,
    "duration": 130,
    "endPoint": "SGN",
    "flightId": 0,
    "isReturn": false,
    "noRefund": false,
    "fareClass": "E1_ECO",
    "startDate": "2022-09-20T06:05:00",
    "groupClass": "Eco",
    "startPoint": "HAN",
    "flightValue": "VJ133|HAN-SGN|202209200605-202209200815",
    "hasDownStop": false,
    "listSegment": [
      {
        "id": 0,
        "class": "E1_ECO",
        "plane": "Airbus A330",
        "airline": "VJ",
        "endTime": "2022-09-20T08:15:00",
        "hasStop": false,
        "duration": 130,
        "endPoint": "SGN",
        "lastItem": true,
        "stopTime": 0,
        "dayChange": false,
        "startTime": "2022-09-20T06:05:00",
        "stopPoint": "SGN",
        "startPoint": "HAN",
        "handBaggage": "07kg",
        "flightNumber": "VJ133",
        "changeAirport": false,
        "changeStation": false,
        "stopOvernight": false
      }
    ],
    "flightNumber": "VJ133"
  },
  "listFlight": [
    {
      "leg": 0,
      "promo": false,
      "isShow": true,
      "airline": "VJ",
      "endDate": "2022-09-20T08:15:00",
      "stopNum": 0,
      "duration": 130,
      "endPoint": "SGN",
      "flightId": 0,
      "noRefund": false,
      "fareClass": "E1_ECO",
      "startDate": "2022-09-20T06:05:00",
      "groupClass": "Eco",
      "startPoint": "HAN",
      "flightValue": "VJ133|HAN-SGN|202209200605-202209200815",
      "hasDownStop": false,
      "listSegment": [
        {
          "id": 0,
          "class": "E1_ECO",
          "plane": "Airbus A330",
          "airline": "VJ",
          "endTime": "2022-09-20T08:15:00",
          "hasStop": false,
          "duration": 130,
          "endPoint": "SGN",
          "lastItem": true,
          "stopTime": 0,
          "dayChange": false,
          "startTime": "2022-09-20T06:05:00",
          "stopPoint": "SGN",
          "startPoint": "HAN",
          "handBaggage": "07kg",
          "flightNumber": "VJ133",
          "changeAirport": false,
          "changeStation": false,
          "stopOvernight": false
        }
      ],
      "flightNumber": "VJ133"
    }
  ],
  "totalPrice": 801920,
  "serviceFeeAdt": 35000,
  "serviceFeeChd": 35000,
  "serviceFeeInf": 35000,
  "totalDiscount": 0,
  "totalNetPrice": 719000,
  "totalCommission": 0,
  "totalServiceFee": 35000,
  "itineraryPassengers": [
    {
      "key": "dup_f_b_cb9c94e5e814e3e0fb8b9c58e643890c",
      "value": "tan@gmail.com0969841833-tan ta-vj_hansgn_2022-09-20t06:05:00"
    }
  ]
}
*/

  int? adt;
  int? chd;
  int? inf;
  int? leg;
  bool? promo;
  String? token;
  int? feeAdt;
  int? feeChd;
  int? feeInf;
  bool? isShow;
  int? taxAdt;
  int? taxChd;
  int? taxInf;
  String? airline;
  int? fareAdt;
  int? fareChd;
  int? fareInf;
  String? session;
  String? currency;
  bool? autoIssue;
  int? itinerary;
  int? fareDataId;
  ResponseCheckOutDataFlightRateFlightItem? flightItem;
  List<ResponseCheckOutDataFlightRateListFlight?>? listFlight;
  int? totalPrice;
  int? serviceFeeAdt;
  int? serviceFeeChd;
  int? serviceFeeInf;
  int? totalDiscount;
  int? totalNetPrice;
  int? totalCommission;
  int? totalServiceFee;
  List<ResponseCheckOutDataFlightRateItineraryPassengers?>? itineraryPassengers;

  ResponseCheckOutDataFlightRate({
    this.adt,
    this.chd,
    this.inf,
    this.leg,
    this.promo,
    this.token,
    this.feeAdt,
    this.feeChd,
    this.feeInf,
    this.isShow,
    this.taxAdt,
    this.taxChd,
    this.taxInf,
    this.airline,
    this.fareAdt,
    this.fareChd,
    this.fareInf,
    this.session,
    this.currency,
    this.autoIssue,
    this.itinerary,
    this.fareDataId,
    this.flightItem,
    this.listFlight,
    this.totalPrice,
    this.serviceFeeAdt,
    this.serviceFeeChd,
    this.serviceFeeInf,
    this.totalDiscount,
    this.totalNetPrice,
    this.totalCommission,
    this.totalServiceFee,
    this.itineraryPassengers,
  });
  ResponseCheckOutDataFlightRate.fromJson(Map<String, dynamic> json) {
    adt = json['adt']?.toInt();
    chd = json['chd']?.toInt();
    inf = json['inf']?.toInt();
    leg = json['leg']?.toInt();
    promo = json['promo'];
    token = json['token']?.toString();
    feeAdt = json['feeAdt']?.toInt();
    feeChd = json['feeChd']?.toInt();
    feeInf = json['feeInf']?.toInt();
    isShow = json['isShow'];
    taxAdt = json['taxAdt']?.toInt();
    taxChd = json['taxChd']?.toInt();
    taxInf = json['taxInf']?.toInt();
    airline = json['airline']?.toString();
    fareAdt = json['fareAdt']?.toInt();
    fareChd = json['fareChd']?.toInt();
    fareInf = json['fareInf']?.toInt();
    session = json['session']?.toString();
    currency = json['currency']?.toString();
    autoIssue = json['autoIssue'];
    itinerary = json['itinerary']?.toInt();
    fareDataId = json['fareDataId']?.toInt();
    flightItem = (json['flightItem'] != null) ? ResponseCheckOutDataFlightRateFlightItem.fromJson(json['flightItem']) : null;
    if (json['listFlight'] != null) {
      final v = json['listFlight'];
      final arr0 = <ResponseCheckOutDataFlightRateListFlight>[];
      v.forEach((v) {
        arr0.add(ResponseCheckOutDataFlightRateListFlight.fromJson(v));
      });
      listFlight = arr0;
    }
    totalPrice = json['totalPrice']?.toInt();
    serviceFeeAdt = json['serviceFeeAdt']?.toInt();
    serviceFeeChd = json['serviceFeeChd']?.toInt();
    serviceFeeInf = json['serviceFeeInf']?.toInt();
    totalDiscount = json['totalDiscount']?.toInt();
    totalNetPrice = json['totalNetPrice']?.toInt();
    totalCommission = json['totalCommission']?.toInt();
    totalServiceFee = json['totalServiceFee']?.toInt();
    if (json['itineraryPassengers'] != null) {
      final v = json['itineraryPassengers'];
      final arr0 = <ResponseCheckOutDataFlightRateItineraryPassengers>[];
      v.forEach((v) {
        arr0.add(ResponseCheckOutDataFlightRateItineraryPassengers.fromJson(v));
      });
      itineraryPassengers = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['adt'] = adt;
    data['chd'] = chd;
    data['inf'] = inf;
    data['leg'] = leg;
    data['promo'] = promo;
    data['token'] = token;
    data['feeAdt'] = feeAdt;
    data['feeChd'] = feeChd;
    data['feeInf'] = feeInf;
    data['isShow'] = isShow;
    data['taxAdt'] = taxAdt;
    data['taxChd'] = taxChd;
    data['taxInf'] = taxInf;
    data['airline'] = airline;
    data['fareAdt'] = fareAdt;
    data['fareChd'] = fareChd;
    data['fareInf'] = fareInf;
    data['session'] = session;
    data['currency'] = currency;
    data['autoIssue'] = autoIssue;
    data['itinerary'] = itinerary;
    data['fareDataId'] = fareDataId;
    if (flightItem != null) {
      data['flightItem'] = flightItem!.toJson();
    }
    if (listFlight != null) {
      final v = listFlight;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['listFlight'] = arr0;
    }
    data['totalPrice'] = totalPrice;
    data['serviceFeeAdt'] = serviceFeeAdt;
    data['serviceFeeChd'] = serviceFeeChd;
    data['serviceFeeInf'] = serviceFeeInf;
    data['totalDiscount'] = totalDiscount;
    data['totalNetPrice'] = totalNetPrice;
    data['totalCommission'] = totalCommission;
    data['totalServiceFee'] = totalServiceFee;
    if (itineraryPassengers != null) {
      final v = itineraryPassengers;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['itineraryPassengers'] = arr0;
    }
    return data;
  }
}

class ResponseCheckOutDataFlight {
/*
{
  "id": "79a582cc-911f-47a5-8893-17cb8c264f21",
  "leg": 0,
  "rate": {
    "adt": 1,
    "chd": 0,
    "inf": 0,
    "leg": 0,
    "promo": false,
    "token": "flight_item_491152777647775740",
    "feeAdt": 520000,
    "feeChd": 400000,
    "feeInf": 0,
    "isShow": true,
    "taxAdt": 47920,
    "taxChd": 47920,
    "taxInf": 0,
    "airline": "VJ",
    "fareAdt": 199000,
    "fareChd": 199000,
    "fareInf": 0,
    "session": "1663400736262",
    "currency": "VND",
    "autoIssue": false,
    "itinerary": 1,
    "fareDataId": 0,
    "flightItem": {
      "leg": 0,
      "promo": false,
      "isShow": true,
      "airline": "VJ",
      "endDate": "2022-09-20T08:15:00",
      "stopNum": 0,
      "duration": 130,
      "endPoint": "SGN",
      "flightId": 0,
      "isReturn": false,
      "noRefund": false,
      "fareClass": "E1_ECO",
      "startDate": "2022-09-20T06:05:00",
      "groupClass": "Eco",
      "startPoint": "HAN",
      "flightValue": "VJ133|HAN-SGN|202209200605-202209200815",
      "hasDownStop": false,
      "listSegment": [
        {
          "id": 0,
          "class": "E1_ECO",
          "plane": "Airbus A330",
          "airline": "VJ",
          "endTime": "2022-09-20T08:15:00",
          "hasStop": false,
          "duration": 130,
          "endPoint": "SGN",
          "lastItem": true,
          "stopTime": 0,
          "dayChange": false,
          "startTime": "2022-09-20T06:05:00",
          "stopPoint": "SGN",
          "startPoint": "HAN",
          "handBaggage": "07kg",
          "flightNumber": "VJ133",
          "changeAirport": false,
          "changeStation": false,
          "stopOvernight": false
        }
      ],
      "flightNumber": "VJ133"
    },
    "listFlight": [
      {
        "leg": 0,
        "promo": false,
        "isShow": true,
        "airline": "VJ",
        "endDate": "2022-09-20T08:15:00",
        "stopNum": 0,
        "duration": 130,
        "endPoint": "SGN",
        "flightId": 0,
        "noRefund": false,
        "fareClass": "E1_ECO",
        "startDate": "2022-09-20T06:05:00",
        "groupClass": "Eco",
        "startPoint": "HAN",
        "flightValue": "VJ133|HAN-SGN|202209200605-202209200815",
        "hasDownStop": false,
        "listSegment": [
          {
            "id": 0,
            "class": "E1_ECO",
            "plane": "Airbus A330",
            "airline": "VJ",
            "endTime": "2022-09-20T08:15:00",
            "hasStop": false,
            "duration": 130,
            "endPoint": "SGN",
            "lastItem": true,
            "stopTime": 0,
            "dayChange": false,
            "startTime": "2022-09-20T06:05:00",
            "stopPoint": "SGN",
            "startPoint": "HAN",
            "handBaggage": "07kg",
            "flightNumber": "VJ133",
            "changeAirport": false,
            "changeStation": false,
            "stopOvernight": false
          }
        ],
        "flightNumber": "VJ133"
      }
    ],
    "totalPrice": 801920,
    "serviceFeeAdt": 35000,
    "serviceFeeChd": 35000,
    "serviceFeeInf": 35000,
    "totalDiscount": 0,
    "totalNetPrice": 719000,
    "totalCommission": 0,
    "totalServiceFee": 35000,
    "itineraryPassengers": [
      {
        "key": "dup_f_b_cb9c94e5e814e3e0fb8b9c58e643890c",
        "value": "tan@gmail.com0969841833-tan ta-vj_hansgn_2022-09-20t06:05:00"
      }
    ]
  },
  "addons": [
    null
  ],
  "session": "1663400736262",
  "aircraft": null,
  "currency": "VND",
  "is_agent": null,
  "operator": null,
  "provider": "VJ",
  "supplier": null,
  "has_promo": false,
  "is_return": false,
  "itinerary": 1,
  "created_at": "2022-09-17T14:47:07.456807+07:00",
  "fare_class": "E1_ECO",
  "passengers": [
    {
      "type": "ADT",
      "index": 0,
      "gender": true,
      "birthday": "31082010",
      "lastName": "TAN",
      "firstName": "TA",
      "listBaggage": [
        null
      ]
    }
  ],
  "price_info": null,
  "seat_class": "E1_ECO_Eco",
  "seat_count": 1,
  "updated_at": "2022-09-17T14:47:07.456807+07:00",
  "adult_count": 1,
  "child_count": 0,
  "group_class": "Eco",
  "is_selected": true,
  "origin_code": "HAN",
  "origin_name": "Hà Nội",
  "total_price": 801920,
  "arrival_date": "2022-09-20T08:15:00+07:00",
  "arrival_time": "2022-09-20T08:15:00+07:00",
  "fare_data_id": 0,
  "infant_count": 0,
  "flight_number": "VJ133",
  "flight_policy": null,
  "suggestion_id": "9dbd76f5-ca71-45dc-a7f9-cde8feb7d018",
  "atadi_order_id": null,
  "departure_date": "2022-09-20T06:05:00+07:00",
  "departure_time": "2022-09-20T06:05:00+07:00",
  "arrival_airport": null,
  "airline_provider": "VJ",
  "booking_category": "DOMESTIC",
  "destination_code": "SGN",
  "destination_name": "Hồ Chí Minh",
  "difference_price": null,
  "atadi_utility_fee": null,
  "departure_airport": null,
  "atadi_package_code": null,
  "pre_reserved_price": null,
  "arrival_timezone_offset": null,
  "departure_timezone_offset": null,
  "atadi_provider_booking_code": "VJ133|HAN-SGN|202209200605-202209200815"
}
*/

  String? id;
  int? leg;
  ResponseCheckOutDataFlightRate? rate;
  // List<ResponseCheckOutDataFlightAddons?>? addons;
  String? session;
  String? aircraft;
  String? currency;
  String? isAgent;
  String? theOperator;
  String? provider;
  String? supplier;
  bool? hasPromo;
  bool? isReturn;
  int? itinerary;
  String? createdAt;
  String? fareClass;
  List<ResponseCheckOutDataFlightPassengers?>? passengers;
  String? priceInfo;
  String? seatClass;
  int? seatCount;
  String? updatedAt;
  int? adultCount;
  int? childCount;
  String? groupClass;
  bool? isSelected;
  String? originCode;
  String? originName;
  int? totalPrice;
  String? arrivalDate;
  String? arrivalTime;
  int? fareDataId;
  int? infantCount;
  String? flightNumber;
  String? flightPolicy;
  String? suggestionId;
  String? atadiOrderId;
  String? departureDate;
  String? departureTime;
  String? arrivalAirport;
  String? airlineProvider;
  String? bookingCategory;
  String? destinationCode;
  String? destinationName;
  String? differencePrice;
  String? atadiUtilityFee;
  String? departureAirport;
  String? atadiPackageCode;
  String? preReservedPrice;
  String? arrivalTimezoneOffset;
  String? departureTimezoneOffset;
  String? atadiProviderBookingCode;

  ResponseCheckOutDataFlight({
    this.id,
    this.leg,
    this.rate,
    // this.addons,
    this.session,
    this.aircraft,
    this.currency,
    this.isAgent,
    this.theOperator,
    this.provider,
    this.supplier,
    this.hasPromo,
    this.isReturn,
    this.itinerary,
    this.createdAt,
    this.fareClass,
    this.passengers,
    this.priceInfo,
    this.seatClass,
    this.seatCount,
    this.updatedAt,
    this.adultCount,
    this.childCount,
    this.groupClass,
    this.isSelected,
    this.originCode,
    this.originName,
    this.totalPrice,
    this.arrivalDate,
    this.arrivalTime,
    this.fareDataId,
    this.infantCount,
    this.flightNumber,
    this.flightPolicy,
    this.suggestionId,
    this.atadiOrderId,
    this.departureDate,
    this.departureTime,
    this.arrivalAirport,
    this.airlineProvider,
    this.bookingCategory,
    this.destinationCode,
    this.destinationName,
    this.differencePrice,
    this.atadiUtilityFee,
    this.departureAirport,
    this.atadiPackageCode,
    this.preReservedPrice,
    this.arrivalTimezoneOffset,
    this.departureTimezoneOffset,
    this.atadiProviderBookingCode,
  });
  ResponseCheckOutDataFlight.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    leg = json['leg']?.toInt();
    rate = (json['rate'] != null) ? ResponseCheckOutDataFlightRate.fromJson(json['rate']) : null;
    session = json['session']?.toString();
    aircraft = json['aircraft']?.toString();
    currency = json['currency']?.toString();
    isAgent = json['is_agent']?.toString();
    theOperator = json['operator']?.toString();
    provider = json['provider']?.toString();
    supplier = json['supplier']?.toString();
    hasPromo = json['has_promo'];
    isReturn = json['is_return'];
    itinerary = json['itinerary']?.toInt();
    createdAt = json['created_at']?.toString();
    fareClass = json['fare_class']?.toString();
    if (json['passengers'] != null) {
    final v = json['passengers'];
    final arr0 = <ResponseCheckOutDataFlightPassengers>[];
    v.forEach((v) {
    arr0.add(ResponseCheckOutDataFlightPassengers.fromJson(v));
    });
    passengers = arr0;
    }
    priceInfo = json['price_info']?.toString();
    seatClass = json['seat_class']?.toString();
    seatCount = json['seat_count']?.toInt();
    updatedAt = json['updated_at']?.toString();
    adultCount = json['adult_count']?.toInt();
    childCount = json['child_count']?.toInt();
    groupClass = json['group_class']?.toString();
    isSelected = json['is_selected'];
    originCode = json['origin_code']?.toString();
    originName = json['origin_name']?.toString();
    totalPrice = json['total_price']?.toInt();
    arrivalDate = json['arrival_date']?.toString();
    arrivalTime = json['arrival_time']?.toString();
    fareDataId = json['fare_data_id']?.toInt();
    infantCount = json['infant_count']?.toInt();
    flightNumber = json['flight_number']?.toString();
    flightPolicy = json['flight_policy']?.toString();
    suggestionId = json['suggestion_id']?.toString();
    atadiOrderId = json['atadi_order_id']?.toString();
    departureDate = json['departure_date']?.toString();
    departureTime = json['departure_time']?.toString();
    arrivalAirport = json['arrival_airport']?.toString();
    airlineProvider = json['airline_provider']?.toString();
    bookingCategory = json['booking_category']?.toString();
    destinationCode = json['destination_code']?.toString();
    destinationName = json['destination_name']?.toString();
    differencePrice = json['difference_price']?.toString();
    atadiUtilityFee = json['atadi_utility_fee']?.toString();
    departureAirport = json['departure_airport']?.toString();
    atadiPackageCode = json['atadi_package_code']?.toString();
    preReservedPrice = json['pre_reserved_price']?.toString();
    arrivalTimezoneOffset = json['arrival_timezone_offset']?.toString();
    departureTimezoneOffset = json['departure_timezone_offset']?.toString();
    atadiProviderBookingCode = json['atadi_provider_booking_code']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['leg'] = leg;
    if (rate != null) {
      data['rate'] = rate!.toJson();
    }
    data['session'] = session;
    data['aircraft'] = aircraft;
    data['currency'] = currency;
    data['is_agent'] = isAgent;
    data['operator'] = theOperator;
    data['provider'] = provider;
    data['supplier'] = supplier;
    data['has_promo'] = hasPromo;
    data['is_return'] = isReturn;
    data['itinerary'] = itinerary;
    data['created_at'] = createdAt;
    data['fare_class'] = fareClass;
    if (passengers != null) {
    final v = passengers;
    final arr0 = [];
    v!.forEach((v) {
    arr0.add(v!.toJson());
    });
    data['passengers'] = arr0;
    }
    data['price_info'] = priceInfo;
    data['seat_class'] = seatClass;
    data['seat_count'] = seatCount;
    data['updated_at'] = updatedAt;
    data['adult_count'] = adultCount;
    data['child_count'] = childCount;
    data['group_class'] = groupClass;
    data['is_selected'] = isSelected;
    data['origin_code'] = originCode;
    data['origin_name'] = originName;
    data['total_price'] = totalPrice;
    data['arrival_date'] = arrivalDate;
    data['arrival_time'] = arrivalTime;
    data['fare_data_id'] = fareDataId;
    data['infant_count'] = infantCount;
    data['flight_number'] = flightNumber;
    data['flight_policy'] = flightPolicy;
    data['suggestion_id'] = suggestionId;
    data['atadi_order_id'] = atadiOrderId;
    data['departure_date'] = departureDate;
    data['departure_time'] = departureTime;
    data['arrival_airport'] = arrivalAirport;
    data['airline_provider'] = airlineProvider;
    data['booking_category'] = bookingCategory;
    data['destination_code'] = destinationCode;
    data['destination_name'] = destinationName;
    data['difference_price'] = differencePrice;
    data['atadi_utility_fee'] = atadiUtilityFee;
    data['departure_airport'] = departureAirport;
    data['atadi_package_code'] = atadiPackageCode;
    data['pre_reserved_price'] = preReservedPrice;
    data['arrival_timezone_offset'] = arrivalTimezoneOffset;
    data['departure_timezone_offset'] = departureTimezoneOffset;
    data['atadi_provider_booking_code'] = atadiProviderBookingCode;
    return data;
    }
}

class ResponseCheckOutDataBookerDataTicketContactInfo {
/*
{}
*/



ResponseCheckOutDataBookerDataTicketContactInfo.fromJson(Map<String, dynamic> json) {
}
Map<String, dynamic> toJson() {
  final data = <String, dynamic>{};
  return data;
}
}

class ResponseCheckOutDataBookerDataContactPerson {
/*
{}
*/


ResponseCheckOutDataBookerDataContactPerson.fromJson(Map<String, dynamic> json) {
}
Map<String, dynamic> toJson() {
  final data = <String, dynamic>{};
  return data;
}
}

class ResponseCheckOutDataBookerData {
/*
{
  "type": "person",
  "email": "tan@gmail.com",
  "phone": "0969841833",
  "gender": 2,
  "user_id": 436664,
  "language": "vi",
  "device_id": "d487bf8fc41f7ea6",
  "last_name": "BUI",
  "first_name": "CHIEN",
  "contact_person": {},
  "ticketContactInfo": {}
}
*/

  String? type;
  String? email;
  String? phone;
  int? gender;
  int? userId;
  String? language;
  String? deviceId;
  String? lastName;
  String? firstName;
  ResponseCheckOutDataBookerDataContactPerson? contactPerson;
  ResponseCheckOutDataBookerDataTicketContactInfo? ticketContactInfo;

  ResponseCheckOutDataBookerData({
    this.type,
    this.email,
    this.phone,
    this.gender,
    this.userId,
    this.language,
    this.deviceId,
    this.lastName,
    this.firstName,
    this.contactPerson,
    this.ticketContactInfo,
  });
  ResponseCheckOutDataBookerData.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    email = json['email']?.toString();
    phone = json['phone']?.toString();
    gender = json['gender']?.toInt();
    userId = json['user_id']?.toInt();
    language = json['language']?.toString();
    deviceId = json['device_id']?.toString();
    lastName = json['last_name']?.toString();
    firstName = json['first_name']?.toString();
    contactPerson = (json['contact_person'] != null) ? ResponseCheckOutDataBookerDataContactPerson.fromJson(json['contact_person']) : null;
    ticketContactInfo = (json['ticketContactInfo'] != null) ? ResponseCheckOutDataBookerDataTicketContactInfo.fromJson(json['ticketContactInfo']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['email'] = email;
    data['phone'] = phone;
    data['gender'] = gender;
    data['user_id'] = userId;
    data['language'] = language;
    data['device_id'] = deviceId;
    data['last_name'] = lastName;
    data['first_name'] = firstName;
    if (contactPerson != null) {
      data['contact_person'] = contactPerson!.toJson();
    }
    if (ticketContactInfo != null) {
      data['ticketContactInfo'] = ticketContactInfo!.toJson();
    }
    return data;
  }
}

class ResponseCheckOutData {
/*
{
  "booking_request_id": "5a5fba9f-8dd1-4833-aa40-3a97dd8e4084",
  "booking_request_code": "BR-20220917-07508025",
  "created_at": "2022-09-17T07:47:07.456Z",
  "booker_data": {
    "type": "person",
    "email": "tan@gmail.com",
    "phone": "0969841833",
    "gender": 2,
    "user_id": 436664,
    "language": "vi",
    "device_id": "d487bf8fc41f7ea6",
    "last_name": "BUI",
    "first_name": "CHIEN",
    "contact_person": {},
    "ticketContactInfo": {}
  },
  "other_expense": null,
  "customer_request": null,
  "payment_method": null,
  "currency": null,
  "coupon_code": null,
  "type": "flight",
  "book_for_me": 0,
  "loyalty_benefit": null,
  "payment_method_fee": 0,
  "request_from": "APP_ANDROID",
  "business_account_id": null,
  "account_data": null,
  "trip_voucher": null,
  "temporary_coupon_info": null,
  "hotel": null,
  "flight": [
    {
      "id": "79a582cc-911f-47a5-8893-17cb8c264f21",
      "leg": 0,
      "rate": {
        "adt": 1,
        "chd": 0,
        "inf": 0,
        "leg": 0,
        "promo": false,
        "token": "flight_item_491152777647775740",
        "feeAdt": 520000,
        "feeChd": 400000,
        "feeInf": 0,
        "isShow": true,
        "taxAdt": 47920,
        "taxChd": 47920,
        "taxInf": 0,
        "airline": "VJ",
        "fareAdt": 199000,
        "fareChd": 199000,
        "fareInf": 0,
        "session": "1663400736262",
        "currency": "VND",
        "autoIssue": false,
        "itinerary": 1,
        "fareDataId": 0,
        "flightItem": {
          "leg": 0,
          "promo": false,
          "isShow": true,
          "airline": "VJ",
          "endDate": "2022-09-20T08:15:00",
          "stopNum": 0,
          "duration": 130,
          "endPoint": "SGN",
          "flightId": 0,
          "isReturn": false,
          "noRefund": false,
          "fareClass": "E1_ECO",
          "startDate": "2022-09-20T06:05:00",
          "groupClass": "Eco",
          "startPoint": "HAN",
          "flightValue": "VJ133|HAN-SGN|202209200605-202209200815",
          "hasDownStop": false,
          "listSegment": [
            {
              "id": 0,
              "class": "E1_ECO",
              "plane": "Airbus A330",
              "airline": "VJ",
              "endTime": "2022-09-20T08:15:00",
              "hasStop": false,
              "duration": 130,
              "endPoint": "SGN",
              "lastItem": true,
              "stopTime": 0,
              "dayChange": false,
              "startTime": "2022-09-20T06:05:00",
              "stopPoint": "SGN",
              "startPoint": "HAN",
              "handBaggage": "07kg",
              "flightNumber": "VJ133",
              "changeAirport": false,
              "changeStation": false,
              "stopOvernight": false
            }
          ],
          "flightNumber": "VJ133"
        },
        "listFlight": [
          {
            "leg": 0,
            "promo": false,
            "isShow": true,
            "airline": "VJ",
            "endDate": "2022-09-20T08:15:00",
            "stopNum": 0,
            "duration": 130,
            "endPoint": "SGN",
            "flightId": 0,
            "noRefund": false,
            "fareClass": "E1_ECO",
            "startDate": "2022-09-20T06:05:00",
            "groupClass": "Eco",
            "startPoint": "HAN",
            "flightValue": "VJ133|HAN-SGN|202209200605-202209200815",
            "hasDownStop": false,
            "listSegment": [
              {
                "id": 0,
                "class": "E1_ECO",
                "plane": "Airbus A330",
                "airline": "VJ",
                "endTime": "2022-09-20T08:15:00",
                "hasStop": false,
                "duration": 130,
                "endPoint": "SGN",
                "lastItem": true,
                "stopTime": 0,
                "dayChange": false,
                "startTime": "2022-09-20T06:05:00",
                "stopPoint": "SGN",
                "startPoint": "HAN",
                "handBaggage": "07kg",
                "flightNumber": "VJ133",
                "changeAirport": false,
                "changeStation": false,
                "stopOvernight": false
              }
            ],
            "flightNumber": "VJ133"
          }
        ],
        "totalPrice": 801920,
        "serviceFeeAdt": 35000,
        "serviceFeeChd": 35000,
        "serviceFeeInf": 35000,
        "totalDiscount": 0,
        "totalNetPrice": 719000,
        "totalCommission": 0,
        "totalServiceFee": 35000,
        "itineraryPassengers": [
          {
            "key": "dup_f_b_cb9c94e5e814e3e0fb8b9c58e643890c",
            "value": "tan@gmail.com0969841833-tan ta-vj_hansgn_2022-09-20t06:05:00"
          }
        ]
      },
      "addons": [
        null
      ],
      "session": "1663400736262",
      "aircraft": null,
      "currency": "VND",
      "is_agent": null,
      "operator": null,
      "provider": "VJ",
      "supplier": null,
      "has_promo": false,
      "is_return": false,
      "itinerary": 1,
      "created_at": "2022-09-17T14:47:07.456807+07:00",
      "fare_class": "E1_ECO",
      "passengers": [
        {
          "type": "ADT",
          "index": 0,
          "gender": true,
          "birthday": "31082010",
          "lastName": "TAN",
          "firstName": "TA",
          "listBaggage": [
            null
          ]
        }
      ],
      "price_info": null,
      "seat_class": "E1_ECO_Eco",
      "seat_count": 1,
      "updated_at": "2022-09-17T14:47:07.456807+07:00",
      "adult_count": 1,
      "child_count": 0,
      "group_class": "Eco",
      "is_selected": true,
      "origin_code": "HAN",
      "origin_name": "Hà Nội",
      "total_price": 801920,
      "arrival_date": "2022-09-20T08:15:00+07:00",
      "arrival_time": "2022-09-20T08:15:00+07:00",
      "fare_data_id": 0,
      "infant_count": 0,
      "flight_number": "VJ133",
      "flight_policy": null,
      "suggestion_id": "9dbd76f5-ca71-45dc-a7f9-cde8feb7d018",
      "atadi_order_id": null,
      "departure_date": "2022-09-20T06:05:00+07:00",
      "departure_time": "2022-09-20T06:05:00+07:00",
      "arrival_airport": null,
      "airline_provider": "VJ",
      "booking_category": "DOMESTIC",
      "destination_code": "SGN",
      "destination_name": "Hồ Chí Minh",
      "difference_price": null,
      "atadi_utility_fee": null,
      "departure_airport": null,
      "atadi_package_code": null,
      "pre_reserved_price": null,
      "arrival_timezone_offset": null,
      "departure_timezone_offset": null,
      "atadi_provider_booking_code": "VJ133|HAN-SGN|202209200605-202209200815"
    }
  ],
  "total_price": 801920,
  "final_discount_value": 0,
  "final_price": 801920,
  "coupon_message": "",
  "total_other_expense_price": 0,
  "from_date": "2022-09-20T06:05:00+07:00",
  "to_date": "2022-09-20T08:15:00+07:00",
  "order_id": null,
  "order_code": null,
  "order_status": null,
  "bank_code": null
}
*/

  String? bookingRequestId;
  String? bookingRequestCode;
  String? createdAt;
  ResponseCheckOutDataBookerData? bookerData;
  String? otherExpense;
  String? customerRequest;
  String? paymentMethod;
  String? currency;
  String? couponCode;
  String? type;
  int? bookForMe;
  String? loyaltyBenefit;
  int? paymentMethodFee;
  String? requestFrom;
  String? businessAccountId;
  String? accountData;
  String? tripVoucher;
  String? temporaryCouponInfo;
  String? hotel;
  List<ResponseCheckOutDataFlight?>? flight;
  int? totalPrice;
  int? finalDiscountValue;
  int? finalPrice;
  String? couponMessage;
  int? totalOtherExpensePrice;
  String? fromDate;
  String? toDate;
  String? orderId;
  String? orderCode;
  String? orderStatus;
  String? bankCode;

  ResponseCheckOutData({
    this.bookingRequestId,
    this.bookingRequestCode,
    this.createdAt,
    this.bookerData,
    this.otherExpense,
    this.customerRequest,
    this.paymentMethod,
    this.currency,
    this.couponCode,
    this.type,
    this.bookForMe,
    this.loyaltyBenefit,
    this.paymentMethodFee,
    this.requestFrom,
    this.businessAccountId,
    this.accountData,
    this.tripVoucher,
    this.temporaryCouponInfo,
    this.hotel,
    this.flight,
    this.totalPrice,
    this.finalDiscountValue,
    this.finalPrice,
    this.couponMessage,
    this.totalOtherExpensePrice,
    this.fromDate,
    this.toDate,
    this.orderId,
    this.orderCode,
    this.orderStatus,
    this.bankCode,
  });
  ResponseCheckOutData.fromJson(Map<String, dynamic> json) {
    bookingRequestId = json['booking_request_id']?.toString();
    bookingRequestCode = json['booking_request_code']?.toString();
    createdAt = json['created_at']?.toString();
    bookerData = (json['booker_data'] != null) ? ResponseCheckOutDataBookerData.fromJson(json['booker_data']) : null;
    otherExpense = json['other_expense']?.toString();
    customerRequest = json['customer_request']?.toString();
    paymentMethod = json['payment_method']?.toString();
    currency = json['currency']?.toString();
    couponCode = json['coupon_code']?.toString();
    type = json['type']?.toString();
    bookForMe = json['book_for_me']?.toInt();
    loyaltyBenefit = json['loyalty_benefit']?.toString();
    paymentMethodFee = json['payment_method_fee']?.toInt();
    requestFrom = json['request_from']?.toString();
    businessAccountId = json['business_account_id']?.toString();
    accountData = json['account_data']?.toString();
    tripVoucher = json['trip_voucher']?.toString();
    temporaryCouponInfo = json['temporary_coupon_info']?.toString();
    hotel = json['hotel']?.toString();
    if (json['flight'] != null) {
      final v = json['flight'];
      final arr0 = <ResponseCheckOutDataFlight>[];
      v.forEach((v) {
        arr0.add(ResponseCheckOutDataFlight.fromJson(v));
      });
      flight = arr0;
    }
    totalPrice = json['total_price']?.toInt();
    finalDiscountValue = json['final_discount_value']?.toInt();
    finalPrice = json['final_price']?.toInt();
    couponMessage = json['coupon_message']?.toString();
    totalOtherExpensePrice = json['total_other_expense_price']?.toInt();
    fromDate = json['from_date']?.toString();
    toDate = json['to_date']?.toString();
    orderId = json['order_id']?.toString();
    orderCode = json['order_code']?.toString();
    orderStatus = json['order_status']?.toString();
    bankCode = json['bank_code']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['booking_request_id'] = bookingRequestId;
    data['booking_request_code'] = bookingRequestCode;
    data['created_at'] = createdAt;
    if (bookerData != null) {
      data['booker_data'] = bookerData!.toJson();
    }
    data['other_expense'] = otherExpense;
    data['customer_request'] = customerRequest;
    data['payment_method'] = paymentMethod;
    data['currency'] = currency;
    data['coupon_code'] = couponCode;
    data['type'] = type;
    data['book_for_me'] = bookForMe;
    data['loyalty_benefit'] = loyaltyBenefit;
    data['payment_method_fee'] = paymentMethodFee;
    data['request_from'] = requestFrom;
    data['business_account_id'] = businessAccountId;
    data['account_data'] = accountData;
    data['trip_voucher'] = tripVoucher;
    data['temporary_coupon_info'] = temporaryCouponInfo;
    data['hotel'] = hotel;
    if (flight != null) {
      final v = flight;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['flight'] = arr0;
    }
    data['total_price'] = totalPrice;
    data['final_discount_value'] = finalDiscountValue;
    data['final_price'] = finalPrice;
    data['coupon_message'] = couponMessage;
    data['total_other_expense_price'] = totalOtherExpensePrice;
    data['from_date'] = fromDate;
    data['to_date'] = toDate;
    data['order_id'] = orderId;
    data['order_code'] = orderCode;
    data['order_status'] = orderStatus;
    data['bank_code'] = bankCode;
    return data;
  }
}

class ResponseCheckOut {
/*
{
  "status": "success",
  "message": "Success",
  "data": {
    "booking_request_id": "5a5fba9f-8dd1-4833-aa40-3a97dd8e4084",
    "booking_request_code": "BR-20220917-07508025",
    "created_at": "2022-09-17T07:47:07.456Z",
    "booker_data": {
      "type": "person",
      "email": "tan@gmail.com",
      "phone": "0969841833",
      "gender": 2,
      "user_id": 436664,
      "language": "vi",
      "device_id": "d487bf8fc41f7ea6",
      "last_name": "BUI",
      "first_name": "CHIEN",
      "contact_person": {},
      "ticketContactInfo": {}
    },
    "other_expense": null,
    "customer_request": null,
    "payment_method": null,
    "currency": null,
    "coupon_code": null,
    "type": "flight",
    "book_for_me": 0,
    "loyalty_benefit": null,
    "payment_method_fee": 0,
    "request_from": "APP_ANDROID",
    "business_account_id": null,
    "account_data": null,
    "trip_voucher": null,
    "temporary_coupon_info": null,
    "hotel": null,
    "flight": [
      {
        "id": "79a582cc-911f-47a5-8893-17cb8c264f21",
        "leg": 0,
        "rate": {
          "adt": 1,
          "chd": 0,
          "inf": 0,
          "leg": 0,
          "promo": false,
          "token": "flight_item_491152777647775740",
          "feeAdt": 520000,
          "feeChd": 400000,
          "feeInf": 0,
          "isShow": true,
          "taxAdt": 47920,
          "taxChd": 47920,
          "taxInf": 0,
          "airline": "VJ",
          "fareAdt": 199000,
          "fareChd": 199000,
          "fareInf": 0,
          "session": "1663400736262",
          "currency": "VND",
          "autoIssue": false,
          "itinerary": 1,
          "fareDataId": 0,
          "flightItem": {
            "leg": 0,
            "promo": false,
            "isShow": true,
            "airline": "VJ",
            "endDate": "2022-09-20T08:15:00",
            "stopNum": 0,
            "duration": 130,
            "endPoint": "SGN",
            "flightId": 0,
            "isReturn": false,
            "noRefund": false,
            "fareClass": "E1_ECO",
            "startDate": "2022-09-20T06:05:00",
            "groupClass": "Eco",
            "startPoint": "HAN",
            "flightValue": "VJ133|HAN-SGN|202209200605-202209200815",
            "hasDownStop": false,
            "listSegment": [
              {
                "id": 0,
                "class": "E1_ECO",
                "plane": "Airbus A330",
                "airline": "VJ",
                "endTime": "2022-09-20T08:15:00",
                "hasStop": false,
                "duration": 130,
                "endPoint": "SGN",
                "lastItem": true,
                "stopTime": 0,
                "dayChange": false,
                "startTime": "2022-09-20T06:05:00",
                "stopPoint": "SGN",
                "startPoint": "HAN",
                "handBaggage": "07kg",
                "flightNumber": "VJ133",
                "changeAirport": false,
                "changeStation": false,
                "stopOvernight": false
              }
            ],
            "flightNumber": "VJ133"
          },
          "listFlight": [
            {
              "leg": 0,
              "promo": false,
              "isShow": true,
              "airline": "VJ",
              "endDate": "2022-09-20T08:15:00",
              "stopNum": 0,
              "duration": 130,
              "endPoint": "SGN",
              "flightId": 0,
              "noRefund": false,
              "fareClass": "E1_ECO",
              "startDate": "2022-09-20T06:05:00",
              "groupClass": "Eco",
              "startPoint": "HAN",
              "flightValue": "VJ133|HAN-SGN|202209200605-202209200815",
              "hasDownStop": false,
              "listSegment": [
                {
                  "id": 0,
                  "class": "E1_ECO",
                  "plane": "Airbus A330",
                  "airline": "VJ",
                  "endTime": "2022-09-20T08:15:00",
                  "hasStop": false,
                  "duration": 130,
                  "endPoint": "SGN",
                  "lastItem": true,
                  "stopTime": 0,
                  "dayChange": false,
                  "startTime": "2022-09-20T06:05:00",
                  "stopPoint": "SGN",
                  "startPoint": "HAN",
                  "handBaggage": "07kg",
                  "flightNumber": "VJ133",
                  "changeAirport": false,
                  "changeStation": false,
                  "stopOvernight": false
                }
              ],
              "flightNumber": "VJ133"
            }
          ],
          "totalPrice": 801920,
          "serviceFeeAdt": 35000,
          "serviceFeeChd": 35000,
          "serviceFeeInf": 35000,
          "totalDiscount": 0,
          "totalNetPrice": 719000,
          "totalCommission": 0,
          "totalServiceFee": 35000,
          "itineraryPassengers": [
            {
              "key": "dup_f_b_cb9c94e5e814e3e0fb8b9c58e643890c",
              "value": "tan@gmail.com0969841833-tan ta-vj_hansgn_2022-09-20t06:05:00"
            }
          ]
        },
        "addons": [
          null
        ],
        "session": "1663400736262",
        "aircraft": null,
        "currency": "VND",
        "is_agent": null,
        "operator": null,
        "provider": "VJ",
        "supplier": null,
        "has_promo": false,
        "is_return": false,
        "itinerary": 1,
        "created_at": "2022-09-17T14:47:07.456807+07:00",
        "fare_class": "E1_ECO",
        "passengers": [
          {
            "type": "ADT",
            "index": 0,
            "gender": true,
            "birthday": "31082010",
            "lastName": "TAN",
            "firstName": "TA",
            "listBaggage": [
              null
            ]
          }
        ],
        "price_info": null,
        "seat_class": "E1_ECO_Eco",
        "seat_count": 1,
        "updated_at": "2022-09-17T14:47:07.456807+07:00",
        "adult_count": 1,
        "child_count": 0,
        "group_class": "Eco",
        "is_selected": true,
        "origin_code": "HAN",
        "origin_name": "Hà Nội",
        "total_price": 801920,
        "arrival_date": "2022-09-20T08:15:00+07:00",
        "arrival_time": "2022-09-20T08:15:00+07:00",
        "fare_data_id": 0,
        "infant_count": 0,
        "flight_number": "VJ133",
        "flight_policy": null,
        "suggestion_id": "9dbd76f5-ca71-45dc-a7f9-cde8feb7d018",
        "atadi_order_id": null,
        "departure_date": "2022-09-20T06:05:00+07:00",
        "departure_time": "2022-09-20T06:05:00+07:00",
        "arrival_airport": null,
        "airline_provider": "VJ",
        "booking_category": "DOMESTIC",
        "destination_code": "SGN",
        "destination_name": "Hồ Chí Minh",
        "difference_price": null,
        "atadi_utility_fee": null,
        "departure_airport": null,
        "atadi_package_code": null,
        "pre_reserved_price": null,
        "arrival_timezone_offset": null,
        "departure_timezone_offset": null,
        "atadi_provider_booking_code": "VJ133|HAN-SGN|202209200605-202209200815"
      }
    ],
    "total_price": 801920,
    "final_discount_value": 0,
    "final_price": 801920,
    "coupon_message": "",
    "total_other_expense_price": 0,
    "from_date": "2022-09-20T06:05:00+07:00",
    "to_date": "2022-09-20T08:15:00+07:00",
    "order_id": null,
    "order_code": null,
    "order_status": null,
    "bank_code": null
  }
}
*/

  String? status;
  String? message;
  ResponseCheckOutData? data;

  ResponseCheckOut({
    this.status,
    this.message,
    this.data,
  });
  ResponseCheckOut.fromJson(Map<String, dynamic> json) {
    status = json['status']?.toString();
    message = json['message']?.toString();
    data = (json['data'] != null) ? ResponseCheckOutData.fromJson(json['data']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    data['message'] = message;
    if (data != null) {
      data['data'] = this.data!.toJson();
    }
    return data;
  }
}

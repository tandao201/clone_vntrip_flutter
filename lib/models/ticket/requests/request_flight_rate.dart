///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class RequestFlightRateListPassenger {
/*
{
  "birthday": "31082010",
  "firstName": "TAN",
  "gender": true,
  "index": 0,
  "lastName": "TA ",
  "listBaggage": [
    null
  ],
  "type": "ADT"
}
*/

  String? birthday;
  String? firstName;
  bool? gender;
  int? index;
  String? lastName;
  // List<RequestFlightRateListPassengerListBaggage?>? listBaggage;
  String? type;

  RequestFlightRateListPassenger({
    this.birthday,
    this.firstName,
    this.gender,
    this.index,
    this.lastName,
    // this.listBaggage,
    this.type,
  });
  RequestFlightRateListPassenger.fromJson(Map<String, dynamic> json) {
    birthday = json['birthday']?.toString();
    firstName = json['firstName']?.toString();
    gender = json['gender'];
    index = json['index']?.toInt();
    lastName = json['lastName']?.toString();
    type = json['type']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['birthday'] = birthday;
    data['firstName'] = firstName;
    data['gender'] = gender;
    data['index'] = index;
    data['lastName'] = lastName;
    data['type'] = type;
    return data;
  }
}

class RequestFlightRateListFareDataListFlightListSegment {
/*
{
  "airline": "VJ",
  "changeAirport": false,
  "changeStation": false,
  "class": "E1_ECO",
  "dayChange": false,
  "duration": 130,
  "endPoint": "SGN",
  "endTime": "2022-09-20T07:55:00",
  "flightNumber": "VJ143",
  "handBaggage": "07kg",
  "hasStop": false,
  "id": 0,
  "lastItem": true,
  "plane": "Airbus A321",
  "startPoint": "HAN",
  "startTime": "2022-09-20T05:45:00",
  "stopOvernight": false,
  "stopPoint": "SGN",
  "stopTime": 0
}
*/

  String? airline;
  bool? changeAirport;
  bool? changeStation;
  String? theClass;
  bool? dayChange;
  int? duration;
  String? endPoint;
  String? endTime;
  String? flightNumber;
  String? handBaggage;
  bool? hasStop;
  int? id;
  // bool? lastItem;
  String? plane;
  String? startPoint;
  String? startTime;
  bool? stopOvernight;
  String? stopPoint;
  int? stopTime;

  RequestFlightRateListFareDataListFlightListSegment({
    this.airline,
    this.changeAirport,
    this.changeStation,
    this.theClass,
    this.dayChange,
    this.duration,
    this.endPoint,
    this.endTime,
    this.flightNumber,
    this.handBaggage,
    this.hasStop,
    this.id,
    // this.lastItem,
    this.plane,
    this.startPoint,
    this.startTime,
    this.stopOvernight,
    this.stopPoint,
    this.stopTime,
  });
  RequestFlightRateListFareDataListFlightListSegment.fromJson(Map<String, dynamic> json) {
    airline = json['airline']?.toString();
    changeAirport = json['changeAirport'];
    changeStation = json['changeStation'];
    theClass = json['class']?.toString();
    dayChange = json['dayChange'];
    duration = json['duration']?.toInt();
    endPoint = json['endPoint']?.toString();
    endTime = json['endTime']?.toString();
    flightNumber = json['flightNumber']?.toString();
    handBaggage = json['handBaggage']?.toString();
    hasStop = json['hasStop'];
    id = json['id']?.toInt();
    // lastItem = json['lastItem'];
    plane = json['plane']?.toString();
    startPoint = json['startPoint']?.toString();
    startTime = json['startTime']?.toString();
    stopOvernight = json['stopOvernight'];
    stopPoint = json['stopPoint']?.toString();
    stopTime = json['stopTime']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['airline'] = airline;
    data['changeAirport'] = changeAirport;
    data['changeStation'] = changeStation;
    data['class'] = theClass;
    data['dayChange'] = dayChange;
    data['duration'] = duration;
    data['endPoint'] = endPoint;
    data['endTime'] = endTime;
    data['flightNumber'] = flightNumber;
    data['handBaggage'] = handBaggage;
    data['hasStop'] = hasStop;
    data['id'] = id;
    // data['lastItem'] = lastItem;
    data['plane'] = plane;
    data['startPoint'] = startPoint;
    data['startTime'] = startTime;
    data['stopOvernight'] = stopOvernight;
    data['stopPoint'] = stopPoint;
    data['stopTime'] = stopTime;
    return data;
  }
}

class RequestFlightRateListFareDataListFlight {
/*
{
  "airline": "VJ",
  "duration": 130,
  "endDate": "2022-09-20T07:55:00",
  "endPoint": "SGN",
  "fareClass": "E1_ECO",
  "flightId": 0,
  "flightNumber": "VJ143",
  "flightValue": "VJ143|HAN-SGN|202209200545-202209200755",
  "groupClass": "Eco",
  "hasDownStop": false,
  "isShow": true,
  "leg": 0,
  "listSegment": [
    {
      "airline": "VJ",
      "changeAirport": false,
      "changeStation": false,
      "class": "E1_ECO",
      "dayChange": false,
      "duration": 130,
      "endPoint": "SGN",
      "endTime": "2022-09-20T07:55:00",
      "flightNumber": "VJ143",
      "handBaggage": "07kg",
      "hasStop": false,
      "id": 0,
      "lastItem": true,
      "plane": "Airbus A321",
      "startPoint": "HAN",
      "startTime": "2022-09-20T05:45:00",
      "stopOvernight": false,
      "stopPoint": "SGN",
      "stopTime": 0
    }
  ],
  "noRefund": false,
  "promo": false,
  "startDate": "2022-09-20T05:45:00",
  "startPoint": "HAN",
  "stopNum": 0
}
*/

  String? airline;
  int? duration;
  String? endDate;
  String? endPoint;
  String? fareClass;
  int? flightId;
  String? flightNumber;
  String? flightValue;
  String? groupClass;
  bool? hasDownStop;
  bool? isShow;
  int? leg;
  List<RequestFlightRateListFareDataListFlightListSegment?>? listSegment;
  bool? noRefund;
  bool? promo;
  String? startDate;
  String? startPoint;
  int? stopNum;

  RequestFlightRateListFareDataListFlight({
    this.airline,
    this.duration,
    this.endDate,
    this.endPoint,
    this.fareClass,
    this.flightId,
    this.flightNumber,
    this.flightValue,
    this.groupClass,
    this.hasDownStop,
    this.isShow,
    this.leg,
    this.listSegment,
    this.noRefund,
    this.promo,
    this.startDate,
    this.startPoint,
    this.stopNum,
  });
  RequestFlightRateListFareDataListFlight.fromJson(Map<String, dynamic> json) {
    airline = json['airline']?.toString();
    duration = json['duration']?.toInt();
    endDate = json['endDate']?.toString();
    endPoint = json['endPoint']?.toString();
    fareClass = json['fareClass']?.toString();
    flightId = json['flightId']?.toInt();
    flightNumber = json['flightNumber']?.toString();
    flightValue = json['flightValue']?.toString();
    groupClass = json['groupClass']?.toString();
    hasDownStop = json['hasDownStop'];
    isShow = json['isShow'];
    leg = json['leg']?.toInt();
    if (json['listSegment'] != null) {
      final v = json['listSegment'];
      final arr0 = <RequestFlightRateListFareDataListFlightListSegment>[];
      v.forEach((v) {
        arr0.add(RequestFlightRateListFareDataListFlightListSegment.fromJson(v));
      });
      listSegment = arr0;
    }
    noRefund = json['noRefund'];
    promo = json['promo'];
    startDate = json['startDate']?.toString();
    startPoint = json['startPoint']?.toString();
    stopNum = json['stopNum']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['airline'] = airline;
    data['duration'] = duration;
    data['endDate'] = endDate;
    data['endPoint'] = endPoint;
    data['fareClass'] = fareClass;
    data['flightId'] = flightId;
    data['flightNumber'] = flightNumber;
    data['flightValue'] = flightValue;
    data['groupClass'] = groupClass;
    data['hasDownStop'] = hasDownStop;
    data['isShow'] = isShow;
    data['leg'] = leg;
    if (listSegment != null) {
      final v = listSegment;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['listSegment'] = arr0;
    }
    data['noRefund'] = noRefund;
    data['promo'] = promo;
    data['startDate'] = startDate;
    data['startPoint'] = startPoint;
    data['stopNum'] = stopNum;
    return data;
  }
}

class RequestFlightRateListFareDataFlightItemListSegment {
/*
{
  "airline": "VJ",
  "changeAirport": false,
  "changeStation": false,
  "class": "E1_ECO",
  "dayChange": false,
  "duration": 130,
  "endPoint": "SGN",
  "endTime": "2022-09-20T07:55:00",
  "flightNumber": "VJ143",
  "handBaggage": "07kg",
  "hasStop": false,
  "id": 0,
  "lastItem": true,
  "plane": "Airbus A321",
  "startPoint": "HAN",
  "startTime": "2022-09-20T05:45:00",
  "stopOvernight": false,
  "stopPoint": "SGN",
  "stopTime": 0
}
*/

  String? airline;
  bool? changeAirport;
  bool? changeStation;
  String? theClass;
  bool? dayChange;
  int? duration;
  String? endPoint;
  String? endTime;
  String? flightNumber;
  String? handBaggage;
  bool? hasStop;
  int? id;
  // bool? lastItem;
  String? plane;
  String? startPoint;
  String? startTime;
  bool? stopOvernight;
  String? stopPoint;
  int? stopTime;

  RequestFlightRateListFareDataFlightItemListSegment({
    this.airline,
    this.changeAirport,
    this.changeStation,
    this.theClass,
    this.dayChange,
    this.duration,
    this.endPoint,
    this.endTime,
    this.flightNumber,
    this.handBaggage,
    this.hasStop,
    this.id,
    // this.lastItem,
    this.plane,
    this.startPoint,
    this.startTime,
    this.stopOvernight,
    this.stopPoint,
    this.stopTime,
  });
  RequestFlightRateListFareDataFlightItemListSegment.fromJson(Map<String, dynamic> json) {
    airline = json['airline']?.toString();
    changeAirport = json['changeAirport'];
    changeStation = json['changeStation'];
    theClass = json['class']?.toString();
    dayChange = json['dayChange'];
    duration = json['duration']?.toInt();
    endPoint = json['endPoint']?.toString();
    endTime = json['endTime']?.toString();
    flightNumber = json['flightNumber']?.toString();
    handBaggage = json['handBaggage']?.toString();
    hasStop = json['hasStop'];
    id = json['id']?.toInt();
    // lastItem = json['lastItem'];
    plane = json['plane']?.toString();
    startPoint = json['startPoint']?.toString();
    startTime = json['startTime']?.toString();
    stopOvernight = json['stopOvernight'];
    stopPoint = json['stopPoint']?.toString();
    stopTime = json['stopTime']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['airline'] = airline;
    data['changeAirport'] = changeAirport;
    data['changeStation'] = changeStation;
    data['class'] = theClass;
    data['dayChange'] = dayChange;
    data['duration'] = duration;
    data['endPoint'] = endPoint;
    data['endTime'] = endTime;
    data['flightNumber'] = flightNumber;
    data['handBaggage'] = handBaggage;
    data['hasStop'] = hasStop;
    data['id'] = id;
    // data['lastItem'] = lastItem;
    data['plane'] = plane;
    data['startPoint'] = startPoint;
    data['startTime'] = startTime;
    data['stopOvernight'] = stopOvernight;
    data['stopPoint'] = stopPoint;
    data['stopTime'] = stopTime;
    return data;
  }
}

class RequestFlightRateListFareDataFlightItem {
/*
{
  "airline": "VJ",
  "duration": 130,
  "endDate": "2022-09-20T07:55:00",
  "endPoint": "SGN",
  "fareClass": "E1_ECO",
  "flightId": 0,
  "flightNumber": "VJ143",
  "flightValue": "VJ143|HAN-SGN|202209200545-202209200755",
  "groupClass": "Eco",
  "hasDownStop": false,
  "isShow": true,
  "leg": 0,
  "listSegment": [
    {
      "airline": "VJ",
      "changeAirport": false,
      "changeStation": false,
      "class": "E1_ECO",
      "dayChange": false,
      "duration": 130,
      "endPoint": "SGN",
      "endTime": "2022-09-20T07:55:00",
      "flightNumber": "VJ143",
      "handBaggage": "07kg",
      "hasStop": false,
      "id": 0,
      "lastItem": true,
      "plane": "Airbus A321",
      "startPoint": "HAN",
      "startTime": "2022-09-20T05:45:00",
      "stopOvernight": false,
      "stopPoint": "SGN",
      "stopTime": 0
    }
  ],
  "noRefund": false,
  "promo": false,
  "startDate": "2022-09-20T05:45:00",
  "startPoint": "HAN",
  "stopNum": 0
}
*/

  String? airline;
  int? duration;
  String? endDate;
  String? endPoint;
  String? fareClass;
  int? flightId;
  String? flightNumber;
  String? flightValue;
  String? groupClass;
  bool? hasDownStop;
  bool? isShow;
  int? leg;
  List<RequestFlightRateListFareDataFlightItemListSegment?>? listSegment;
  bool? noRefund;
  bool? promo;
  String? startDate;
  String? startPoint;
  int? stopNum;

  RequestFlightRateListFareDataFlightItem({
    this.airline,
    this.duration,
    this.endDate,
    this.endPoint,
    this.fareClass,
    this.flightId,
    this.flightNumber,
    this.flightValue,
    this.groupClass,
    this.hasDownStop,
    this.isShow,
    this.leg,
    this.listSegment,
    this.noRefund,
    this.promo,
    this.startDate,
    this.startPoint,
    this.stopNum,
  });
  RequestFlightRateListFareDataFlightItem.fromJson(Map<String, dynamic> json) {
    airline = json['airline']?.toString();
    duration = json['duration']?.toInt();
    endDate = json['endDate']?.toString();
    endPoint = json['endPoint']?.toString();
    fareClass = json['fareClass']?.toString();
    flightId = json['flightId']?.toInt();
    flightNumber = json['flightNumber']?.toString();
    flightValue = json['flightValue']?.toString();
    groupClass = json['groupClass']?.toString();
    hasDownStop = json['hasDownStop'];
    isShow = json['isShow'];
    leg = json['leg']?.toInt();
    if (json['listSegment'] != null) {
      final v = json['listSegment'];
      final arr0 = <RequestFlightRateListFareDataFlightItemListSegment>[];
      v.forEach((v) {
        arr0.add(RequestFlightRateListFareDataFlightItemListSegment.fromJson(v));
      });
      listSegment = arr0;
    }
    noRefund = json['noRefund'];
    promo = json['promo'];
    startDate = json['startDate']?.toString();
    startPoint = json['startPoint']?.toString();
    stopNum = json['stopNum']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['airline'] = airline;
    data['duration'] = duration;
    data['endDate'] = endDate;
    data['endPoint'] = endPoint;
    data['fareClass'] = fareClass;
    data['flightId'] = flightId;
    data['flightNumber'] = flightNumber;
    data['flightValue'] = flightValue;
    data['groupClass'] = groupClass;
    data['hasDownStop'] = hasDownStop;
    data['isShow'] = isShow;
    data['leg'] = leg;
    if (listSegment != null) {
      final v = listSegment;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['listSegment'] = arr0;
    }
    data['noRefund'] = noRefund;
    data['promo'] = promo;
    data['startDate'] = startDate;
    data['startPoint'] = startPoint;
    data['stopNum'] = stopNum;
    return data;
  }
}

class RequestFlightRateListFareData {
/*
{
  "adt": 1,
  "airline": "VJ",
  "autoIssue": false,
  "chd": 0,
  "currency": "VND",
  "fareAdt": 199000,
  "fareChd": 199000,
  "fareDataId": 0,
  "fareInf": 0,
  "feeAdt": 520000,
  "feeChd": 400000,
  "feeInf": 0,
  "flightItem": {
    "airline": "VJ",
    "duration": 130,
    "endDate": "2022-09-20T07:55:00",
    "endPoint": "SGN",
    "fareClass": "E1_ECO",
    "flightId": 0,
    "flightNumber": "VJ143",
    "flightValue": "VJ143|HAN-SGN|202209200545-202209200755",
    "groupClass": "Eco",
    "hasDownStop": false,
    "isShow": true,
    "leg": 0,
    "listSegment": [
      {
        "airline": "VJ",
        "changeAirport": false,
        "changeStation": false,
        "class": "E1_ECO",
        "dayChange": false,
        "duration": 130,
        "endPoint": "SGN",
        "endTime": "2022-09-20T07:55:00",
        "flightNumber": "VJ143",
        "handBaggage": "07kg",
        "hasStop": false,
        "id": 0,
        "lastItem": true,
        "plane": "Airbus A321",
        "startPoint": "HAN",
        "startTime": "2022-09-20T05:45:00",
        "stopOvernight": false,
        "stopPoint": "SGN",
        "stopTime": 0
      }
    ],
    "noRefund": false,
    "promo": false,
    "startDate": "2022-09-20T05:45:00",
    "startPoint": "HAN",
    "stopNum": 0
  },
  "inf": 0,
  "isShow": true,
  "itinerary": 1,
  "leg": 0,
  "listFlight": [
    {
      "airline": "VJ",
      "duration": 130,
      "endDate": "2022-09-20T07:55:00",
      "endPoint": "SGN",
      "fareClass": "E1_ECO",
      "flightId": 0,
      "flightNumber": "VJ143",
      "flightValue": "VJ143|HAN-SGN|202209200545-202209200755",
      "groupClass": "Eco",
      "hasDownStop": false,
      "isShow": true,
      "leg": 0,
      "listSegment": [
        {
          "airline": "VJ",
          "changeAirport": false,
          "changeStation": false,
          "class": "E1_ECO",
          "dayChange": false,
          "duration": 130,
          "endPoint": "SGN",
          "endTime": "2022-09-20T07:55:00",
          "flightNumber": "VJ143",
          "handBaggage": "07kg",
          "hasStop": false,
          "id": 0,
          "lastItem": true,
          "plane": "Airbus A321",
          "startPoint": "HAN",
          "startTime": "2022-09-20T05:45:00",
          "stopOvernight": false,
          "stopPoint": "SGN",
          "stopTime": 0
        }
      ],
      "noRefund": false,
      "promo": false,
      "startDate": "2022-09-20T05:45:00",
      "startPoint": "HAN",
      "stopNum": 0
    }
  ],
  "promo": false,
  "serviceFeeAdt": 35000,
  "serviceFeeChd": 35000,
  "serviceFeeInf": 35000,
  "session": "1663400300157",
  "taxAdt": 47920,
  "taxChd": 47920,
  "taxInf": 0,
  "token": "flight_item_491150957470834700",
  "totalCommission": 0,
  "totalDiscount": 0,
  "totalNetPrice": 719000,
  "totalPrice": 801920,
  "totalServiceFee": 35000
}
*/

  int? adt;
  String? airline;
  bool? autoIssue;
  int? chd;
  String? currency;
  int? fareAdt;
  int? fareChd;
  int? fareDataId;
  int? fareInf;
  int? feeAdt;
  int? feeChd;
  int? feeInf;
  RequestFlightRateListFareDataFlightItem? flightItem;
  int? inf;
  bool? isShow;
  int? itinerary;
  int? leg;
  List<RequestFlightRateListFareDataListFlight?>? listFlight;
  bool? promo;
  int? serviceFeeAdt;
  int? serviceFeeChd;
  int? serviceFeeInf;
  String? session;
  int? taxAdt;
  int? taxChd;
  int? taxInf;
  String? token;
  int? totalCommission;
  int? totalDiscount;
  int? totalNetPrice;
  int? totalPrice;
  int? totalServiceFee;

  RequestFlightRateListFareData({
    this.adt,
    this.airline,
    this.autoIssue,
    this.chd,
    this.currency,
    this.fareAdt,
    this.fareChd,
    this.fareDataId,
    this.fareInf,
    this.feeAdt,
    this.feeChd,
    this.feeInf,
    this.flightItem,
    this.inf,
    this.isShow,
    this.itinerary,
    this.leg,
    this.listFlight,
    this.promo,
    this.serviceFeeAdt,
    this.serviceFeeChd,
    this.serviceFeeInf,
    this.session,
    this.taxAdt,
    this.taxChd,
    this.taxInf,
    this.token,
    this.totalCommission,
    this.totalDiscount,
    this.totalNetPrice,
    this.totalPrice,
    this.totalServiceFee,
  });
  RequestFlightRateListFareData.fromJson(Map<String, dynamic> json) {
    adt = json['adt']?.toInt();
    airline = json['airline']?.toString();
    autoIssue = json['autoIssue'];
    chd = json['chd']?.toInt();
    currency = json['currency']?.toString();
    fareAdt = json['fareAdt']?.toInt();
    fareChd = json['fareChd']?.toInt();
    fareDataId = json['fareDataId']?.toInt();
    fareInf = json['fareInf']?.toInt();
    feeAdt = json['feeAdt']?.toInt();
    feeChd = json['feeChd']?.toInt();
    feeInf = json['feeInf']?.toInt();
    flightItem = (json['flightItem'] != null) ? RequestFlightRateListFareDataFlightItem.fromJson(json['flightItem']) : null;
    inf = json['inf']?.toInt();
    isShow = json['isShow'];
    itinerary = json['itinerary']?.toInt();
    leg = json['leg']?.toInt();
    if (json['listFlight'] != null) {
      final v = json['listFlight'];
      final arr0 = <RequestFlightRateListFareDataListFlight>[];
      v.forEach((v) {
        arr0.add(RequestFlightRateListFareDataListFlight.fromJson(v));
      });
      listFlight = arr0;
    }
    promo = json['promo'];
    serviceFeeAdt = json['serviceFeeAdt']?.toInt();
    serviceFeeChd = json['serviceFeeChd']?.toInt();
    serviceFeeInf = json['serviceFeeInf']?.toInt();
    session = json['session']?.toString();
    taxAdt = json['taxAdt']?.toInt();
    taxChd = json['taxChd']?.toInt();
    taxInf = json['taxInf']?.toInt();
    token = json['token']?.toString();
    totalCommission = json['totalCommission']?.toInt();
    totalDiscount = json['totalDiscount']?.toInt();
    totalNetPrice = json['totalNetPrice']?.toInt();
    totalPrice = json['totalPrice']?.toInt();
    totalServiceFee = json['totalServiceFee']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['adt'] = adt;
    data['airline'] = airline;
    data['autoIssue'] = autoIssue;
    data['chd'] = chd;
    data['currency'] = currency;
    data['fareAdt'] = fareAdt;
    data['fareChd'] = fareChd;
    data['fareDataId'] = fareDataId;
    data['fareInf'] = fareInf;
    data['feeAdt'] = feeAdt;
    data['feeChd'] = feeChd;
    data['feeInf'] = feeInf;
    if (flightItem != null) {
      data['flightItem'] = flightItem!.toJson();
    }
    data['inf'] = inf;
    data['isShow'] = isShow;
    data['itinerary'] = itinerary;
    data['leg'] = leg;
    if (listFlight != null) {
      final v = listFlight;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['listFlight'] = arr0;
    }
    data['promo'] = promo;
    data['serviceFeeAdt'] = serviceFeeAdt;
    data['serviceFeeChd'] = serviceFeeChd;
    data['serviceFeeInf'] = serviceFeeInf;
    data['session'] = session;
    data['taxAdt'] = taxAdt;
    data['taxChd'] = taxChd;
    data['taxInf'] = taxInf;
    data['token'] = token;
    data['totalCommission'] = totalCommission;
    data['totalDiscount'] = totalDiscount;
    data['totalNetPrice'] = totalNetPrice;
    data['totalPrice'] = totalPrice;
    data['totalServiceFee'] = totalServiceFee;
    return data;
  }
}

class RequestFlightRateBooker {
/*
{
  "email": "tan@gmail.com",
  "firstName": "CHIEN",
  "gender": 2,
  "lastName": "BUI",
  "phone": "0969841833"
}
*/

  String? email;
  String? firstName;
  int? gender;
  String? lastName;
  String? phone;

  RequestFlightRateBooker({
    this.email,
    this.firstName,
    this.gender,
    this.lastName,
    this.phone,
  });
  RequestFlightRateBooker.fromJson(Map<String, dynamic> json) {
    email = json['email']?.toString();
    firstName = json['firstName']?.toString();
    gender = json['gender']?.toInt();
    lastName = json['lastName']?.toString();
    phone = json['phone']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['email'] = email;
    data['firstName'] = firstName;
    data['gender'] = gender;
    data['lastName'] = lastName;
    data['phone'] = phone;
    return data;
  }
}

class RequestFlightRate {
/*
{
  "bookable": false,
  "booker": {
    "email": "tan@gmail.com",
    "firstName": "CHIEN",
    "gender": 2,
    "lastName": "BUI",
    "phone": "0969841833"
  },
  "flightType": "domestic",
  "itinerary": 1,
  "listFareData": [
    {
      "adt": 1,
      "airline": "VJ",
      "autoIssue": false,
      "chd": 0,
      "currency": "VND",
      "fareAdt": 199000,
      "fareChd": 199000,
      "fareDataId": 0,
      "fareInf": 0,
      "feeAdt": 520000,
      "feeChd": 400000,
      "feeInf": 0,
      "flightItem": {
        "airline": "VJ",
        "duration": 130,
        "endDate": "2022-09-20T07:55:00",
        "endPoint": "SGN",
        "fareClass": "E1_ECO",
        "flightId": 0,
        "flightNumber": "VJ143",
        "flightValue": "VJ143|HAN-SGN|202209200545-202209200755",
        "groupClass": "Eco",
        "hasDownStop": false,
        "isShow": true,
        "leg": 0,
        "listSegment": [
          {
            "airline": "VJ",
            "changeAirport": false,
            "changeStation": false,
            "class": "E1_ECO",
            "dayChange": false,
            "duration": 130,
            "endPoint": "SGN",
            "endTime": "2022-09-20T07:55:00",
            "flightNumber": "VJ143",
            "handBaggage": "07kg",
            "hasStop": false,
            "id": 0,
            "lastItem": true,
            "plane": "Airbus A321",
            "startPoint": "HAN",
            "startTime": "2022-09-20T05:45:00",
            "stopOvernight": false,
            "stopPoint": "SGN",
            "stopTime": 0
          }
        ],
        "noRefund": false,
        "promo": false,
        "startDate": "2022-09-20T05:45:00",
        "startPoint": "HAN",
        "stopNum": 0
      },
      "inf": 0,
      "isShow": true,
      "itinerary": 1,
      "leg": 0,
      "listFlight": [
        {
          "airline": "VJ",
          "duration": 130,
          "endDate": "2022-09-20T07:55:00",
          "endPoint": "SGN",
          "fareClass": "E1_ECO",
          "flightId": 0,
          "flightNumber": "VJ143",
          "flightValue": "VJ143|HAN-SGN|202209200545-202209200755",
          "groupClass": "Eco",
          "hasDownStop": false,
          "isShow": true,
          "leg": 0,
          "listSegment": [
            {
              "airline": "VJ",
              "changeAirport": false,
              "changeStation": false,
              "class": "E1_ECO",
              "dayChange": false,
              "duration": 130,
              "endPoint": "SGN",
              "endTime": "2022-09-20T07:55:00",
              "flightNumber": "VJ143",
              "handBaggage": "07kg",
              "hasStop": false,
              "id": 0,
              "lastItem": true,
              "plane": "Airbus A321",
              "startPoint": "HAN",
              "startTime": "2022-09-20T05:45:00",
              "stopOvernight": false,
              "stopPoint": "SGN",
              "stopTime": 0
            }
          ],
          "noRefund": false,
          "promo": false,
          "startDate": "2022-09-20T05:45:00",
          "startPoint": "HAN",
          "stopNum": 0
        }
      ],
      "promo": false,
      "serviceFeeAdt": 35000,
      "serviceFeeChd": 35000,
      "serviceFeeInf": 35000,
      "session": "1663400300157",
      "taxAdt": 47920,
      "taxChd": 47920,
      "taxInf": 0,
      "token": "flight_item_491150957470834700",
      "totalCommission": 0,
      "totalDiscount": 0,
      "totalNetPrice": 719000,
      "totalPrice": 801920,
      "totalServiceFee": 35000
    }
  ],
  "listPassenger": [
    {
      "birthday": "31082010",
      "firstName": "TAN",
      "gender": true,
      "index": 0,
      "lastName": "TA ",
      "listBaggage": [
        null
      ],
      "type": "ADT"
    }
  ],
  "requestFrom": "APP_ANDROID"
}
*/

  bool? bookable;
  RequestFlightRateBooker? booker;
  String? flightType;
  int? itinerary;
  List<RequestFlightRateListFareData?>? listFareData;
  List<RequestFlightRateListPassenger?>? listPassenger;
  String? requestFrom;

  RequestFlightRate({
    this.bookable,
    this.booker,
    this.flightType,
    this.itinerary,
    this.listFareData,
    this.listPassenger,
    this.requestFrom,
  });
  RequestFlightRate.fromJson(Map<String, dynamic> json) {
    bookable = json['bookable'];
    booker = (json['booker'] != null) ? RequestFlightRateBooker.fromJson(json['booker']) : null;
    flightType = json['flightType']?.toString();
    itinerary = json['itinerary']?.toInt();
    if (json['listFareData'] != null) {
      final v = json['listFareData'];
      final arr0 = <RequestFlightRateListFareData>[];
      v.forEach((v) {
        arr0.add(RequestFlightRateListFareData.fromJson(v));
      });
      listFareData = arr0;
    }
    if (json['listPassenger'] != null) {
      final v = json['listPassenger'];
      final arr0 = <RequestFlightRateListPassenger>[];
      v.forEach((v) {
        arr0.add(RequestFlightRateListPassenger.fromJson(v));
      });
      listPassenger = arr0;
    }
    requestFrom = json['requestFrom']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['bookable'] = bookable;
    if (booker != null) {
      data['booker'] = booker!.toJson();
    }
    data['flightType'] = flightType;
    data['itinerary'] = itinerary;
    if (listFareData != null) {
      final v = listFareData;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['listFareData'] = arr0;
    }
    if (listPassenger != null) {
      final v = listPassenger;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['listPassenger'] = arr0;
    }
    data['requestFrom'] = requestFrom;
    return data;
  }
}
